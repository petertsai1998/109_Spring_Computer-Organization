$date
	Wed May 12 22:11:56 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$var reg 1 ! CLK $end
$var reg 1 " RST $end
$var reg 32 # instruction [31:0] $end
$var reg 32 $ pc [31:0] $end
$var reg 5 % rd [4:0] $end
$var reg 5 & rs [4:0] $end
$var reg 5 ' rt [4:0] $end
$var integer 32 ( count [31:0] $end
$var integer 32 ) end_count [31:0] $end
$var integer 32 * handle [31:0] $end
$var integer 32 + i [31:0] $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_n $end
$var wire 32 , pc_4 [31:0] $end
$var wire 32 - pc [31:0] $end
$var wire 1 . overflow $end
$var wire 32 / instruction [31:0] $end
$var wire 32 0 Zero_Filled_32 [31:0] $end
$var wire 1 1 Zero $end
$var wire 5 2 Write_Register [4:0] $end
$var wire 32 3 Write_Back [31:0] $end
$var wire 32 4 Sign_extend_32 [31:0] $end
$var wire 32 5 Shifter_Result [31:0] $end
$var wire 32 6 Result [31:0] $end
$var wire 1 7 RegWrite $end
$var wire 1 8 RegDst $end
$var wire 32 9 Read_Data_2 [31:0] $end
$var wire 32 : Read_Data_1 [31:0] $end
$var wire 2 ; FURslt [1:0] $end
$var wire 4 < ALU_operation [3:0] $end
$var wire 32 = ALUSrc_2 [31:0] $end
$var wire 1 > ALUSrc $end
$var wire 3 ? ALUOP [2:0] $end
$var reg 1 @ leftRight $end
$scope module AC $end
$var wire 6 A funct_i [5:0] $end
$var wire 3 B ALUOp_i [2:0] $end
$var reg 4 C ALU_operation_o [3:0] $end
$var reg 2 D FURslt_o [1:0] $end
$upscope $end
$scope module ALU $end
$var wire 4 E ALU_operation_i [3:0] $end
$var wire 32 F aluSrc2 [31:0] $end
$var wire 32 G aluSrc1 [31:0] $end
$var reg 1 . overflow $end
$var reg 32 H result [31:0] $end
$var reg 1 1 zero $end
$upscope $end
$scope module ALU_src2Src $end
$var wire 1 > select_i $end
$var wire 32 I data_o [31:0] $end
$var wire 32 J data1_i [31:0] $end
$var wire 32 K data0_i [31:0] $end
$upscope $end
$scope module Adder1 $end
$var wire 32 L src2_i [31:0] $end
$var wire 32 M sum_o [31:0] $end
$var wire 32 N src1_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 O instr_op_i [5:0] $end
$var reg 3 P ALUOp_o [2:0] $end
$var reg 1 > ALUSrc_o $end
$var reg 1 8 RegDst_o $end
$var reg 1 7 RegWrite_o $end
$upscope $end
$scope module IM $end
$var wire 32 Q pc_addr_i [31:0] $end
$var reg 32 R instr_o [31:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 T data0_i [4:0] $end
$var wire 5 U data1_i [4:0] $end
$var wire 1 8 select_i $end
$var wire 5 V data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 W pc_in_i [31:0] $end
$var wire 1 " rst_n $end
$var reg 32 X pc_out_o [31:0] $end
$upscope $end
$scope module RDdata_Source $end
$var wire 32 Y data0_i [31:0] $end
$var wire 2 Z select_i [1:0] $end
$var wire 32 [ data2_i [31:0] $end
$var wire 32 \ data1_i [31:0] $end
$var reg 32 ] data_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 ^ RDaddr_i [4:0] $end
$var wire 32 _ RDdata_i [31:0] $end
$var wire 5 ` RSaddr_i [4:0] $end
$var wire 32 a RSdata_o [31:0] $end
$var wire 5 b RTaddr_i [4:0] $end
$var wire 32 c RTdata_o [31:0] $end
$var wire 1 7 RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_n $end
$upscope $end
$scope module SE $end
$var wire 16 d data_i [15:0] $end
$var reg 32 e data_o [31:0] $end
$upscope $end
$scope module ZF $end
$var wire 16 f data_i [15:0] $end
$var reg 32 g data_o [31:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 @ leftRight $end
$var wire 32 h sftSrc [31:0] $end
$var wire 5 i shamt [4:0] $end
$var wire 32 j result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
b100000 S
bx R
bx Q
bx P
bx O
bx N
bx M
bz L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
bx ?
x>
bx =
bx <
bx ;
bx :
bx 9
x8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
x1
bx 0
bx /
x.
bx -
bx ,
b100000 +
b10 *
b11001 )
b0 (
bx '
bx &
bx %
bx $
b0 #
0"
0!
$end
#5000
b1010 3
b1010 ]
b1010 _
b1010 0
b1010 [
b1010 g
b1010 6
b1010 H
b1010 Y
b1010 5
b1010 \
b1010 j
b1010 =
b1010 F
b1010 I
b1010 h
b1010 4
b1010 J
b1010 e
b10 <
b10 C
b10 E
b0 ;
b0 D
b0 Z
08
1>
b0 ?
b0 B
b0 P
17
01
b1 2
b1 V
b1 ^
b0 i
b1010 f
b1010 d
b1010 A
b1000 O
b0 9
b0 K
b0 c
b1 b
b0 :
b0 G
b0 a
b0 `
b0 U
b1 T
b100000000000010000000000001010 /
b100000000000010000000000001010 R
b100 ,
b100 M
b100 W
b0 -
b0 N
b0 Q
b0 X
1!
#10000
b1 '
b0 &
b100000000000010000000000001010 #
b100 $
1"
0!
#15000
b100 3
b100 ]
b100 _
b100 6
b100 H
b100 Y
b100 0
b100 [
b100 g
b100 5
b100 \
b100 j
b100 =
b100 F
b100 I
b100 h
b100 4
b100 J
b100 e
b10 2
b10 V
b10 ^
b100 f
b100 d
b100 A
b10 b
b10 T
b100000000000100000000000000100 /
b100000000000100000000000000100 R
b1000 ,
b1000 M
b1000 W
b100 -
b100 N
b100 Q
b100 X
b0 9
b0 K
b0 c
1!
#20000
b10 '
b1000 $
b100000000000100000000000000100 #
b1 (
b11111 +
0!
#25000
b0 3
b0 ]
b0 _
b1100000110000 0
b1100000110000 [
b1100000110000 g
b0 6
b0 H
b0 Y
b11 2
b11 V
b11 ^
b1100000110000 4
b1100000110000 J
b1100000110000 e
b111 <
b111 C
b111 E
18
0>
b10 ?
b10 B
b10 P
b1100000110000 f
b1100000110000 d
b110000 A
b0 O
b1010 :
b1010 G
b1010 a
b1 `
b11 U
b1000100001100000110000 /
b1000100001100000110000 R
b1100 ,
b1100 M
b1100 W
b1000 -
b1000 N
b1000 Q
b1000 X
b100 9
b100 K
b100 c
1!
#30000
b11 %
b1 &
b1100 $
b1000100001100000110000 #
b10 (
b11111 +
0!
#35000
b1110 3
b1110 ]
b1110 _
b1110 6
b1110 H
b1110 Y
b10000000010011 0
b10000000010011 [
b10000000010011 g
11
b10000000010011 4
b10000000010011 J
b10000000010011 e
b10 <
b10 C
b10 E
b100 2
b100 V
b100 ^
b10000000010011 f
b10000000010011 d
b10011 A
b100 U
b1000100010000000010011 /
b1000100010000000010011 R
b10000 ,
b10000 M
b10000 W
b1100 -
b1100 N
b1100 Q
b1100 X
1!
#40000
b100 %
b10000 $
b1000100010000000010011 #
b11 (
b11111 +
0!
#45000
b110 3
b110 ]
b110 _
b110 6
b110 H
b110 Y
b10100000010001 0
b10100000010001 [
b10100000010001 g
01
b10100000010001 4
b10100000010001 J
b10100000010001 e
b110 <
b110 C
b110 E
b101 2
b101 V
b101 ^
b10100000010001 f
b10100000010001 d
b10001 A
b101 U
b1000100010100000010001 /
b1000100010100000010001 R
b10100 ,
b10100 M
b10100 W
b10000 -
b10000 N
b10000 Q
b10000 X
1!
#50000
b101 %
b10100 $
b1000100010100000010001 #
b100 (
b11111 +
0!
#55000
b11111111111111111111111111111001 3
b11111111111111111111111111111001 ]
b11111111111111111111111111111001 _
b10100000010101 0
b10100000010101 [
b10100000010101 g
b11111111111111111111111111111001 6
b11111111111111111111111111111001 H
b11111111111111111111111111111001 Y
b0 5
b0 \
b0 j
b10100000010101 4
b10100000010101 J
b10100000010101 e
b1100 <
b1100 C
b1100 E
b0 =
b0 F
b0 I
b0 h
b10100000010101 f
b10100000010101 d
b10101 A
b0 9
b0 K
b0 c
b0 b
b110 :
b110 G
b110 a
b101 `
b0 T
b101000000010100000010101 /
b101000000010100000010101 R
b11000 ,
b11000 M
b11000 W
b10100 -
b10100 N
b10100 Q
b10100 X
1!
#60000
b0 '
b101 &
b11000 $
b101000000010100000010101 #
b101 (
b11111 +
0!
#65000
b0 0
b0 [
b0 g
b0 6
b0 H
b0 Y
0@
b0 3
b0 ]
b0 _
b0 4
b0 J
b0 e
b0 <
b0 C
b0 E
b1 ;
b1 D
b1 Z
b0 2
b0 V
b0 ^
b0 f
b0 d
b0 A
b0 `
b0 U
b0 /
b0 R
b11100 ,
b11100 M
b11100 W
b11000 -
b11000 N
b11000 Q
b11000 X
b0 :
b0 G
b0 a
1!
#70000
b11001 (
b11111 +
0!
#75000
b100000 ,
b100000 M
b100000 W
b11100 -
b11100 N
b11100 Q
b11100 X
1!
#80000
0!
#85000
b100100 ,
b100100 M
b100100 W
b100000 -
b100000 N
b100000 Q
b100000 X
1!
